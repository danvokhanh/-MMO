{"version":3,"file":"get-video-id.esm.min.js","sources":["../src/youtube.js","../src/vimeo.js","../src/vine.js","../src/videopress.js","../src/microsoftstream.js","../src/tiktok.js","../src/dailymotion.js","../src/utils/sanitize-url.js","../src/utils/get-src.js","../src/index.js","../src/utils/extract-google-redirection-url.js"],"sourcesContent":["/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n\t// Split parameters or split folder separator\n\tif (shortcodeString.includes('?')) {\n\t\tshortcodeString = shortcodeString.split('?')[0];\n\t}\n\n\tif (shortcodeString.includes('/')) {\n\t\tshortcodeString = shortcodeString.split('/')[0];\n\t}\n\n\tif (shortcodeString.includes('&')) {\n\t\tshortcodeString = shortcodeString.split('&')[0];\n\t}\n\n\treturn shortcodeString;\n}\n\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function youtube(youtubeString) {\n\tlet string_ = youtubeString;\n\n\t// Remove the '-nocookie' flag from youtube urls\n\tstring_ = string_.replace('-nocookie', '');\n\n\t// Remove time hash at the end of the string\n\tstring_ = string_.replace(/#t=.*$/, '');\n\n\t// Strip the leading protocol\n\tstring_ = string_.replace(/^https?:\\/\\//, '');\n\n\t// Shortcode\n\tconst shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n\tif (shortcode.test(string_)) {\n\t\tconst shortcodeid = string_.split(shortcode)[1];\n\t\treturn stripParameters(shortcodeid);\n\t}\n\n\t// Shorts\n\tconst shortsUrl = /\\/shorts\\//g;\n\tif (shortsUrl.test(string_)) {\n\t\treturn stripParameters(string_.split(shortsUrl)[1]);\n\t}\n\n\t// V= or vi=\n\tconst parameterv = /v=|vi=/g;\n\n\tif (parameterv.test(string_)) {\n\t\tconst array = string_.split(parameterv);\n\t\treturn stripParameters(array[1].split('&')[0]);\n\t}\n\n\t// /v/ or /vi/ or /watch/\n\tconst inlinev = /\\/v\\/|\\/vi\\/|\\/watch\\//g;\n\n\tif (inlinev.test(string_)) {\n\t\tconst inlineid = string_.split(inlinev)[1];\n\t\treturn stripParameters(inlineid);\n\t}\n\n\t// Format an_webp\n\tconst parameterwebp = /\\/an_webp\\//g;\n\n\tif (parameterwebp.test(string_)) {\n\t\tconst webp = string_.split(parameterwebp)[1];\n\t\treturn stripParameters(webp);\n\t}\n\n\t// /e/\n\tconst eformat = /\\/e\\//g;\n\n\tif (eformat.test(string_)) {\n\t\tconst estring = string_.split(eformat)[1];\n\t\treturn stripParameters(estring);\n\t}\n\n\t// Embed\n\tconst embedreg = /\\/embed\\//g;\n\n\tif (embedreg.test(string_)) {\n\t\tconst embedid = string_.split(embedreg)[1];\n\t\treturn stripParameters(embedid);\n\t}\n\n\t// ignore /user/username pattern\n\tconst usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n\tif (usernamereg.test(string_)) {\n\t\treturn undefined;\n\t}\n\n\t// User\n\tconst userreg = /\\/user\\/(?!.*videos)/g;\n\n\tif (userreg.test(string_)) {\n\t\tconst elements = string_.split('/');\n\t\treturn stripParameters(elements.pop());\n\t}\n\n\t// Attribution_link\n\tconst attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n\tif (attrreg.test(string_)) {\n\t\treturn stripParameters(string_.match(attrreg)[1]);\n\t}\n\n\t// Live\n\tconst livereg = /\\/live\\//g;\n\n\tif (livereg.test(string_)) {\n\t\tconst liveid = string_.split(livereg)[1];\n\t\treturn stripParameters(liveid);\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\nexport default function vimeo(vimeoString) {\n\tlet string_ = vimeoString;\n\n\tif (string_.includes('#')) {\n\t\t[string_] = string_.split('#');\n\t}\n\n\tif (string_.includes('?') && !string_.includes('clip_id=')) {\n\t\t[string_] = string_.split('?');\n\t}\n\n\tlet id;\n\tlet array;\n\n\tconst event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n\n\tconst eventMatches = event.exec(string_);\n\n\tif (eventMatches && eventMatches[1]) {\n\t\treturn eventMatches[1];\n\t}\n\n\tconst primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n\n\tconst matches = primary.exec(string_);\n\tif (matches && matches[1]) {\n\t\treturn matches[1];\n\t}\n\n\tconst vimeoPipe = [\n\t\t'https?://player.vimeo.com/video/[0-9]+$',\n\t\t'https?://vimeo.com/channels',\n\t\t'groups',\n\t\t'album',\n\t].join('|');\n\n\tconst vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n\tif (vimeoRegex.test(string_)) {\n\t\tarray = string_.split('/');\n\t\tif (array && array.length > 0) {\n\t\t\tid = array.pop();\n\t\t}\n\t} else if (/clip_id=/gim.test(string_)) {\n\t\tarray = string_.split('clip_id=');\n\t\tif (array && array.length > 0) {\n\t\t\t[id] = array[1].split('&');\n\t\t}\n\t}\n\n\treturn id;\n}\n","/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vine(string_) {\n\tconst regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n\tconst matches = regex.exec(string_);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function videopress(urlString) {\n\tlet idRegex;\n\n\tif (urlString.includes('embed')) {\n\t\tidRegex = /embed\\/(\\w{8})/;\n\t\treturn urlString.match(idRegex)[1];\n\t}\n\n\tidRegex = /\\/v\\/(\\w{8})/;\n\n\tconst matches = urlString.match(idRegex);\n\n\tif (matches && matches.length > 0) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function microsoftStream(urlString) {\n\tconst regex = (urlString.includes('embed'))\n\t\t? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/\n\t\t: /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n\tconst matches = regex.exec(urlString);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function tiktok(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed && basicParsed.length > 2) {\n\t\treturn basicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function dailymotion(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed) {\n\t\treturn basicParsed[3];\n\t}\n\n\t// Parse shortlink\n\tconst shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n\tconst shortParsed = shortRegex.exec(urlString);\n\tif (shortParsed && shortParsed.length > 1) {\n\t\treturn shortParsed[1];\n\t}\n\n\t// Dynamic link\n\tconst dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n\tconst dynamicParsed = dynamicRegex.exec(urlString);\n\tif (dynamicParsed && dynamicParsed.length > 2) {\n\t\treturn dynamicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","import getSrc from './get-src.js';\n\n/**\n * Prepare the URL by doing common cleanup operations common for all URL types.\n * @param {String} input\n * @returns {String}\n */\nexport default function sanitizeUrl(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError(`sanitizeUrl expected a string, got ${typeof input}`);\n\t}\n\n\tlet string_ = input;\n\n\tif (/<iframe/gi.test(string_)) {\n\t\tstring_ = getSrc(string_) || '';\n\t}\n\n\t// Remove surrounding whitespaces or linefeeds\n\tstring_ = string_.trim();\n\n\t// Remove any leading `www.`\n\tstring_ = string_.replace('/www.', '/');\n\n\treturn string_;\n}\n","\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\nexport default function getSrc(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError('getSrc expected a string');\n\t}\n\n\tconst srcRegEx = /src=\"(.*?)\"/gm;\n\tconst matches = srcRegEx.exec(input);\n\n\tif (matches && matches.length >= 2) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","import youtube from './youtube.js';\nimport vimeo from './vimeo.js';\nimport vine from './vine.js';\nimport videopress from './videopress.js';\nimport microsoftStream from './microsoftstream.js';\nimport tiktok from './tiktok.js';\nimport dailymotion from './dailymotion.js';\nimport sanitizeUrl from './utils/sanitize-url.js';\nimport extractGoogleRedirectionUrl from './utils/extract-google-redirection-url.js';\n\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\nfunction getVideoId(urlString) {\n\tif (typeof urlString !== 'string') {\n\t\tthrow new TypeError('get-video-id expects a string');\n\t}\n\n\tconst string_ = sanitizeUrl(urlString);\n\tconst url = extractGoogleRedirectionUrl(string_);\n\n\tlet metadata = {\n\t\tid: null,\n\t\tservice: null,\n\t};\n\n\tif (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(url)) {\n\t\tmetadata = {\n\t\t\tid: youtube(url),\n\t\t\tservice: 'youtube',\n\t\t};\n\t} else if (/vimeo/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: vimeo(url),\n\t\t\tservice: 'vimeo',\n\t\t};\n\t} else if (/vine/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: vine(url),\n\t\t\tservice: 'vine',\n\t\t};\n\t} else if (/videopress/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: videopress(url),\n\t\t\tservice: 'videopress',\n\t\t};\n\t} else if (/microsoftstream/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: microsoftStream(url),\n\t\t\tservice: 'microsoftstream',\n\t\t};\n\t} else if (/tiktok\\.com/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: tiktok(url),\n\t\t\tservice: 'tiktok',\n\t\t};\n\t} else if (/(dailymotion\\.com|dai\\.ly)/.test(url)) {\n\t\tmetadata = {\n\t\t\tid: dailymotion(url),\n\t\t\tservice: 'dailymotion',\n\t\t};\n\t}\n\n\treturn metadata;\n}\n\nexport default getVideoId;\n","/**\n * Extract the url query parameter from a Google redirect url.\n *\n * @example\n * ```javascript\n * const url = extractGoogleRedirectionUrl('https://www.google.cz/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0ahUKEwj30L2MvpDVAhUFZVAKHb8CBaYQuAIIIjAA&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdQw4w9WgXcQ')\n * // => 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n * ```\n * @param {String} input\n * @returns {String}\n */\nexport default function extractGoogleRedirectionUrl(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError(`extractGoogleRedirectionUrl expected a string, got ${typeof input}`);\n\t}\n\n\tconst string_ = input.trim();\n\n\t// Try to handle google redirection uri\n\tif (/\\/\\/google|www\\.google/.test(string_)) {\n\t\ttry {\n\t\t\tconst urlObject = new URL(input);\n\n\t\t\tconst parameters = new URLSearchParams(urlObject.search);\n\t\t\tconst extractedUrl = parameters.get('url');\n\n\t\t\tif (extractedUrl) {\n\t\t\t\treturn decodeURIComponent(extractedUrl);\n\t\t\t}\n\t\t} catch {\n\t\t\t// If there's an error (e.g., input is not a valid URL), return the trimmed input\n\t\t\treturn string_;\n\t\t}\n\t}\n\n\treturn string_;\n}\n\n"],"names":["stripParameters","shortcodeString","includes","split","youtube","youtubeString","string_","replace","shortcode","test","shortsUrl","parameterv","inlinev","parameterwebp","eformat","embedreg","pop","attrreg","match","livereg","vimeo","vimeoString","id","array","eventMatches","exec","matches","vimeoPipe","join","RegExp","length","vine","videopress","urlString","idRegex","microsoftStream","tiktok","basicParsed","dailymotion","shortParsed","dynamicParsed","sanitizeUrl","input","TypeError","getSrc","trim","getVideoId","url","urlObject","URL","extractedUrl","URLSearchParams","search","get","decodeURIComponent","extractGoogleRedirectionUrl","metadata","service"],"mappings":"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"}